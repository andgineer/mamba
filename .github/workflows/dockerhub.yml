# This workflow build and push Docker image to docker hub
# https://docs.docker.com/ci-cd/github-actions/
name: dockerhub

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      mamba_version:
        description: 'Mamba version to use for release'
        required: false
        type: string

env:
  DEFAULT_MAMBA_VERSION: 'latest'
  DEFAULT_PYTHON: '3.13'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.12", "3.13"]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build image for version detection
        id: version_build
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          build-args: PYTHON_VERSION=${{ matrix.python_version }}
          push: false
          tags: temp-mamba-${{ matrix.python_version }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Get Mamba version
        id: mamba_version
        run: |
          MAMBA_VERSION=$(docker run --rm temp-mamba-${{ matrix.python_version }}:latest bash -c "/opt/conda/bin/mamba --version 2>/dev/null")
          if [ -z "$MAMBA_VERSION" ]; then
            MAMBA_VERSION=$(docker run --rm temp-mamba-${{ matrix.python_version }}:latest bash -c "conda list mamba" | grep "^mamba " | awk '{print $2}' | head -1)
          fi
          if [ -z "$MAMBA_VERSION" ]; then
            MAMBA_VERSION="0.0.0"
            echo "Warning: Could not detect Mamba version, using default: ${MAMBA_VERSION}"
          fi
          docker rmi temp-mamba-${{ matrix.python_version }}:latest
          echo "version=${MAMBA_VERSION}" >> $GITHUB_OUTPUT
          echo "Detected Mamba version for Python ${{ matrix.python_version }}: ${MAMBA_VERSION}"
          
          # Save version info for release
          mkdir -p /tmp/versions
          echo "Python ${{ matrix.python_version }}: ${MAMBA_VERSION}" > /tmp/versions/info-${{ matrix.python_version }}.txt


      - name: Generate tags
        id: tags
        run: |
          MAMBA_VERSION=${{ steps.mamba_version.outputs.version }}
          PYTHON_VERSION=${{ matrix.python_version }}
          
          # Base tags
          TAGS="${{ secrets.DOCKER_HUB_USERNAME }}/mamba:${PYTHON_VERSION}"
          
          # Add latest tag only for default Python version
          if [[ "${PYTHON_VERSION}" == "${{ env.DEFAULT_PYTHON }}" ]]; then
            TAGS="${TAGS},${{ secrets.DOCKER_HUB_USERNAME }}/mamba:latest"
          fi
          
          # Add mamba version tags
          TAGS="${TAGS},${{ secrets.DOCKER_HUB_USERNAME }}/mamba:mamba-${MAMBA_VERSION}-py${PYTHON_VERSION}"
          
          # Add mamba version without python suffix only for default Python version
          if [[ "${PYTHON_VERSION}" == "${{ env.DEFAULT_PYTHON }}" ]]; then
            TAGS="${TAGS},${{ secrets.DOCKER_HUB_USERNAME }}/mamba:mamba-${MAMBA_VERSION}"
          fi
          
          # Add git tag if this is a tagged release
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            TAGS="${TAGS},${{ secrets.DOCKER_HUB_USERNAME }}/mamba:${TAG_NAME}-py${PYTHON_VERSION}"
            if [[ "${PYTHON_VERSION}" == "${{ env.DEFAULT_PYTHON }}" ]]; then
              TAGS="${TAGS},${{ secrets.DOCKER_HUB_USERNAME }}/mamba:${TAG_NAME}"
            fi
          fi
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Generated tags for Python ${PYTHON_VERSION}: ${TAGS}"

      - name: Build and push to docker hub
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./Dockerfile
          build-args: PYTHON_VERSION=${{ matrix.python_version }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: |-
            linux/amd64
            linux/arm64

      - name: Image digest
        if: github.event_name != 'pull_request'
        run: echo ${{ steps.build.outputs.digest }}
        
      - name: Upload version info
        uses: actions/upload-artifact@v4
        with:
          name: versions-${{ matrix.python_version }}
          path: /tmp/versions/info-${{ matrix.python_version }}.txt

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download version info
        uses: actions/download-artifact@v4
        with:
          pattern: versions-*
          path: /tmp/all-versions
          merge-multiple: true

      - name: Generate release tag
        id: generate_release_tag
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%d-%H%M%S")
          echo "tag=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "Generated release tag: ${TIMESTAMP}"

      - name: Check if release exists
        id: check_release
        run: |
          TAG_NAME="${{ steps.generate_release_tag.outputs.tag }}"
          if gh release view "${TAG_NAME}" >/dev/null 2>&1; then
            echo "Release ${TAG_NAME} already exists, skipping creation"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release ${TAG_NAME} does not exist, will create"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release body
        id: create_body
        run: |
          {
            echo "Docker Images built on $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            echo ""
            echo "Mamba Versions:"
            cat /tmp/all-versions/info-*.txt
            echo ""
            echo "Docker Hub: https://hub.docker.com/r/andgineer/mamba/tags?page=1&page_size=25&ordering=last_updated"
          } > release_body.txt

      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate_release_tag.outputs.tag }}
          release_name: ${{ steps.generate_release_tag.outputs.tag }}
          body_path: release_body.txt
          draft: false
          prerelease: false
